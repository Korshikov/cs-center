package ru.compscicenter.java2014.collections;

import java.util.*;

public class MyMultiSet<T> extends AbstractCollection<T> implements MultiSet<T> {
    private final Map<T, Integer> backingMap = new HashMap<>();

    private class InternalIterator implements Iterator<T> {
        private final Iterator<Map.Entry<T, Integer>> backingIterator = new HashSet<>(backingMap.entrySet()).iterator();
        private Map.Entry<T, Integer> current;
        private int currentRemained;
        private boolean isLastRemoved;

        @Override
        public boolean hasNext() {
            return currentRemained > 0 || backingIterator.hasNext();
        }

        @Override
        public T next() {
            if (currentRemained == 0) {
                current = backingIterator.next();
                currentRemained = current.getValue();
            }
            currentRemained--;
            isLastRemoved = false;
            return current.getKey();
        }

        @Override
        public void remove() {
            if (current == null) {
                throw new IllegalStateException("next method has not yet been called");
            }
            if (isLastRemoved) {
                throw new IllegalStateException("has already been called after the last call to the next method");
            }
            MyMultiSet.this.remove(current.getValue());
            isLastRemoved = true;
        }
    }

    public MyMultiSet() {
    }

    public MyMultiSet(Collection<? extends T> collection) {
        addAll(collection);
    }

    @Override
    public int size() {
        return backingMap.values().stream().mapToInt(count -> count).sum();
    }

    @Override
    public boolean isEmpty() {
        return size() == 0;
    }

    @Override
    public boolean contains(Object item) {
        return count(item) > 0;
    }

    @Override
    public Iterator<T> iterator() {
        return new InternalIterator();
    }

    @Override
    public boolean add(T item) {
        add(item, 1);
        return true;
    }

    @Override
    public int add(T item, int occurrences) {
        if (occurrences < 0) {
            throw new IllegalArgumentException("occurrences cannot be negative");
        }
        int prevOccurrences = count(item);
        if (occurrences > 0) {
            backingMap.put(item, prevOccurrences + occurrences);
        }
        return prevOccurrences;
    }

    @Override
    public boolean remove(Object item) {
        return remove(item, 1) > 0;
    }

    @Override
    public int remove(Object item, int occurrences) {
        if (occurrences < 0) {
            throw new IllegalArgumentException("occurrences cannot be negative");
        }
        int prevOccurrences = count(item);
        if (prevOccurrences > 0) {
            if (occurrences >= prevOccurrences) {
                backingMap.remove(item);
            } else {
                backingMap.put((T) item, prevOccurrences - occurrences);
            }
        }
        return prevOccurrences;
    }

    @Override
    public int count(Object item) {
        return backingMap.getOrDefault(item, 0);
    }

    @Override
    public boolean containsAll(Collection<?> collection) {
        return backingMap.keySet().containsAll(collection);
    }

    @Override
    public boolean removeAll(Collection<?> collection) {
        return backingMap.keySet().removeAll(collection);
    }

    @Override
    public boolean retainAll(Collection<?> collection) {
        return backingMap.keySet().retainAll(collection);
    }

    @Override
    public void clear() {
        backingMap.clear();
    }

    @Override
    public int hashCode() {
        return backingMap.hashCode();
    }

    @Override
    public boolean equals(Object object) {
        if (this == object) {
            return true;
        }
        if (object == null || getClass() != object.getClass()) {
            return false;
        }
        MyMultiSet<T> other = (MyMultiSet<T>) object;
        return backingMap.equals(other.backingMap);
    }
    public final void print() {
        for (Object o : this) {
            System.out.print(o + " ");
        }
        System.out.println();
    }
}